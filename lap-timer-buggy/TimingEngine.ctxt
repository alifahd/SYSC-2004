#BlueJ class context
comment0.target=TimingEngine
comment0.text=\r\n\ The\ timer\ engine\ for\ a\ lap\ timer\ application.\ This\ engine\ can\ keep\r\n\ track\ of\ a\ 'run'.\ A\ run\ is\ a\ sequence\ of\ one\ or\ more\ consecutive\ laps.\r\n\ The\ timer\ records\ single\ lap\ times\ and\ the\ time\ for\ the\ total\ run,\ \r\n\ and\ it\ calculate\ averages\ and\ speed.\ \r\n\ \r\n\ @author\ Michael\ Kolling?\r\n\ @version\ 20\ September\ 2004?\r\n\ \r\n\ @author\ Lynn\ Marshall\r\n\ @version\ Bugs\ added\ September\ 18,\ 2012\r\n
comment1.params=
comment1.target=TimingEngine()
comment1.text=\r\n\ Create\ a\ TimingEngine\ object.\ The\ object\ will\ be\ initialised\ at\ 0,\r\n\ status\ is\ "Stopped",\ ready\ to\ start\ timing.\ The\ default\ lap\ length\r\n\ is\ 400\ m.\r\n
comment10.params=
comment10.target=int\ getLapLength()
comment10.text=\r\n\ Return\ the\ length\ of\ a\ lap.\r\n
comment11.params=length
comment11.target=void\ setLapLength(int)
comment11.text=\r\n\ Set\ the\ length\ of\ a\ lap.\r\n
comment12.params=
comment12.target=void\ finishLap()
comment12.text=\r\n\ Private\ method\ called\ whenever\ a\ lap\ is\ finished.\ This\ method\r\n\ updates\ the\ statistics.\r\n
comment13.params=time
comment13.target=java.lang.String\ timeToString(long)
comment13.text=\r\n\ Convert\ a\ time\ interval\ in\ milli-seconds\ into\ a\ String\ in\ the\r\n\ format\ "m\:ss\:hh".\r\n
comment14.params=number
comment14.target=java.lang.String\ twoDigit(long)
comment14.text=\r\n\ Convert\ a\ number\ into\ a\ two-digit\ String\ representation.\r\n
comment15.params=
comment15.target=long\ getSystemTime()
comment15.text=\r\n\ Return\ the\ current\ time\ of\ the\ system\ clock\ (in\ milli-seconds).\r\n
comment2.params=
comment2.target=void\ startLap()
comment2.text=\r\n\ Instruct\ the\ timer\ to\ start\ timing\ a\ lap.\r\n\ If\ we\ were\ not\ timing\ before,\ this\ starts\ the\ timer\ for\ a\ new\ \r\n\ run.\ If\ we\ were\ already\ timing,\ this\ starts\ a\ new\ lap,\ adding\ the\r\n\ current\ lap\ time\ to\ the\ total.\r\n
comment3.params=
comment3.target=void\ stop()
comment3.text=\r\n\ Stop\ timing.\ Add\ the\ current\ lap\ time\ to\ the\ total,\ and\ set\r\n\ the\ timer\ into\ idle\ mode\ (waiting\ for\ a\ new\ run).\r\n
comment4.params=
comment4.target=java.lang.String\ getStatus()
comment4.text=\r\n\ Return\ the\ current\ status\ of\ the\ timer.\ The\ status\ is\ one\ of\ the\r\n\ two\ Strings\ "Timing..."\ or\ "Stopped",\ indicating\ whether\ this\ \r\n\ timer\ is\ currently\ running\ or\ stopped.\r\n
comment5.params=
comment5.target=int\ getLapCount()
comment5.text=\r\n\ Return\ the\ number\ of\ laps\ completed\ in\ this\ run.\r\n
comment6.params=
comment6.target=java.lang.String\ getLastTime()
comment6.text=\r\n\ Return\ the\ time\ of\ the\ last\ lap\ completed.\r\n\ The\ result\ is\ a\ string\ in\ the\ format\ "m\:ss\:hh",\ where\ m\ is\r\n\ the\ number\ of\ minutes,\ ss\ the\ number\ of\ seconds,\ and\ hh\ the\ number\r\n\ of\ hundredths\ of\ a\ second.\ For\ example\ "7\:02\:43".\r\n
comment7.params=
comment7.target=java.lang.String\ getAverageTime()
comment7.text=\r\n\ Return\ the\ average\ time\ for\ a\ lap\ in\ this\ run.\r\n\ The\ result\ is\ a\ string\ in\ the\ format\ "m\:ss\:hh".\r\n
comment8.params=
comment8.target=java.lang.String\ getTotalTime()
comment8.text=\r\n\ Return\ the\ total\ time\ of\ the\ last\ or\ current\ run.\r\n\ The\ result\ is\ a\ string\ in\ the\ format\ "m\:ss\:hh".\r\n
comment9.params=
comment9.target=java.lang.String\ getAverageSpeed()
comment9.text=\r\n\ Return\ the\ average\ speed\ in\ this\ run\ in\ meters\ per\ second.\r\n\ The\ result\ is\ a\ string\ such\ as\ "73\ m/s".\r\n
numComments=16
